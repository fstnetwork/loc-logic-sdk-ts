/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Source".
 */
export type Source =
  | {
      Terms: TermsProps;
    }
  | {
      DateHistogram: DateProps;
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "OrderBy".
 */
export type OrderBy = "Asc" | "Desc";
/**
 * A condition consists of one or more criteria an event must match.
 *
 * `logic_expr()` perform the conversion of enum into `String`
 *
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Condition".
 */
export type Condition =
  | {
      Eq: QueryMap;
    }
  | {
      NotEq: QueryMap;
    }
  | {
      Gt: QueryMap;
    }
  | {
      Lt: QueryMap;
    }
  | {
      Gte: QueryMap;
    }
  | {
      Lte: QueryMap;
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Filter".
 */
export type Filter =
  | {
      Range: FilterMap;
    }
  | {
      Wildcard: QueryMap;
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Query".
 */
export type Query =
  | {
      Match: QueryMap;
    }
  | {
      Term: QueryMap;
    }
  | {
      MatchPhrase: QueryMap;
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "uint32".
 */
export type Uint32 = number;

export interface EventJsonSchema {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Aggregation".
 */
export interface Aggregation {
  after: {
    [k: string]: string;
  };
  queries: AggregationSource[];
  size?: number | null;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "AggregationSource".
 */
export interface AggregationSource {
  field: string;
  value: Source;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "TermsProps".
 */
export interface TermsProps {
  field: string;
  orderBy: OrderBy;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "DateProps".
 */
export interface DateProps {
  field: string;
  fixedInterval: string;
  format: string;
  orderBy: OrderBy;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "AggregationResponse".
 */
export interface AggregationResponse {
  after: {
    [k: string]: string;
  };
  buckets: Bucket[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Bucket".
 */
export interface Bucket {
  docCount: number;
  key: {
    [k: string]: string;
  };
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "QueryMap".
 */
export interface QueryMap {
  field: string;
  value: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Duration".
 */
export interface Duration {
  nanos: number;
  secs: number;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Event".
 */
export interface Event {
  dataProcessIdentityContext: IdentityContext;
  executionId: string;
  label: Label;
  logicIdentityContext: IdentityContext;
  meta: string;
  sequence: number;
  sourceDigitalIdentity: string;
  targetDigitalIdentity: string;
  taskId: string;
  timestamp: string;
  type: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "IdentityContext".
 */
export interface IdentityContext {
  /**
   * Name
   */
  name: string;
  /**
   * Permanent Identity
   */
  permanentIdentity: string;
  /**
   * Revision
   */
  revision: number;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Label".
 */
export interface Label {
  id: string;
  name: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "FilterMap".
 */
export interface FilterMap {
  field: string;
  value: FilterProps;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "FilterProps".
 */
export interface FilterProps {
  gte?: number | null;
  lte?: number | null;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "PatternRequest".
 */
export interface PatternRequest {
  filter?: Filter | null;
  maxSpan?: Duration | null;
  sequences: SequenceEvent[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SequenceEvent".
 */
export interface SequenceEvent {
  conditions: Condition[];
  sharedFields: string[];
  type: string;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "PatternResponse".
 */
export interface PatternResponse {
  count: number;
  sequences: SequencesResult[];
  took: number;
  total: number;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SequencesResult".
 */
export interface SequencesResult {
  events: Event[];
  joinKeys: string[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SearchRequest".
 */
export interface SearchRequest {
  aggregation?: Aggregation | null;
  excludes: Query[];
  filters: Filter[];
  from: number;
  queries: Query[];
  size: number;
  sorts: Sort[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Sort".
 */
export interface Sort {
  field: string;
  orderBy: OrderBy;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SearchResponse".
 */
export interface SearchResponse {
  aggregation?: AggregationResponse | null;
  count: number;
  events: Event[];
  took: number;
  total: number;
  [k: string]: unknown;
}
