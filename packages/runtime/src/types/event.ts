/* eslint-disable @typescript-eslint/indent */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Query".
 */
export type Query =
  | {
      field: string
      type: 'match'
      value: string
      [k: string]: unknown
    }
  | {
      field: string
      type: 'match_phrase'
      value: string
      [k: string]: unknown
    }
  | {
      field: string
      type: 'term'
      value: string
      [k: string]: unknown
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Op".
 */
export type Op = 'eq' | 'ne' | 'gt' | 'lt' | 'gte' | 'lte';
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Filter".
 */
export type Filter =
  | {
      field: string
      gte?: number | null
      lte?: number | null
      type: 'range'
      [k: string]: unknown
    }
  | {
      field: string
      type: 'wildcard'
      value: string
      [k: string]: unknown
    };
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SortOrder".
 */
export type SortOrder = 'asc' | 'desc';
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "uint32".
 */
export type Uint32 = number;

export interface EventJsonSchema {
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Aggregation".
 */
export interface Aggregation {
  after?: {
    [k: string]: string
  }
  queries: Query[]
  size?: number | null
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "AggregationResult".
 */
export interface AggregationResult {
  after: {
    [k: string]: string
  }
  buckets: Bucket[]
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Bucket".
 */
export interface Bucket {
  docCount: number
  key: {
    [k: string]: string
  }
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Condition".
 */
export interface Condition {
  field: string
  op: Op
  value: string
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Event".
 */
export interface Event {
  dataProcessIdentityContext: IdentityContext
  executionId: string
  label: Label
  logicIdentityContext: IdentityContext
  meta: string
  sequence: number
  sourceDigitalIdentity: string
  targetDigitalIdentity: string
  taskId: string
  timestamp: string
  type: string
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "IdentityContext".
 */
export interface IdentityContext {
  /**
   * Name
   */
  name: string
  /**
   * Permanent Identity
   */
  permanentIdentity: string
  /**
   * Revision
   */
  revision: number
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Label".
 */
export interface Label {
  id: string
  name: string
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Pattern".
 */
export interface Pattern {
  filter?: Filter | null
  maxSpan?: string | null
  sequences: Sequence[]
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Sequence".
 */
export interface Sequence {
  conditions?: Condition[] | null
  sharedFields?: string[] | null
  type?: string | null
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "PatternResult".
 */
export interface PatternResult {
  count: number
  sequences: SequencesResult[]
  took: number
  total: number
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SequencesResult".
 */
export interface SequencesResult {
  events: Event[]
  joinKeys: string[]
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Search".
 */
export interface Search {
  aggregation?: Aggregation | null
  excludes?: Query[] | null
  filters?: Filter[] | null
  from?: number | null
  queries?: Query[] | null
  size?: number | null
  sorts?: Sort[] | null
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "Sort".
 */
export interface Sort {
  field: string
  order: SortOrder
  [k: string]: unknown
}
/**
 * This interface was referenced by `EventJsonSchema`'s JSON-Schema
 * via the `definition` "SearchResult".
 */
export interface SearchResult {
  aggregation?: AggregationResult | null
  count: number
  events: Event[]
  took: number
  total: number
  [k: string]: unknown
}
